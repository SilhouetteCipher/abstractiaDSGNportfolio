---
export interface Props {
  model: {
    id: string;
    name: string;
    slug: string;
    type: string;
    description: string;
    thumbnail?: string;
    main_image?: string;
    bundles?: {
      images?: {
        url: string;
        size?: string;
      };
      models?: {
        url: string;
        size?: string;
      };
      all?: {
        url: string;
        size?: string;
      };
    };
  };
  index: number;
}

const { model, index } = Astro.props;
---

<article class="refined-card group bg-white overflow-hidden">
  <div class="relative aspect-[4/3] overflow-hidden">
    <!-- Main Link -->
    <a href={`${import.meta.env.BASE_URL.replace(/\/$/, '')}/model/${model.slug}`} class="block w-full h-full">
      <!-- Image -->
      {model.thumbnail ? (
        <img 
          src={model.thumbnail}
          alt={model.name}
          class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
          onerror="this.onerror=null; this.src=this.src.replace('main.jpg', 'main.png')"
        />
      ) : (
        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
          <div class="text-center">
            <div class="text-4xl font-black mb-2 refined-outline">3D</div>
            <div class="text-sm uppercase tracking-widest text-gray-500">Model</div>
          </div>
        </div>
      )}
    </a>
    
    <!-- Number Overlay -->
    <div class="absolute top-4 right-4 text-white/40 pointer-events-none z-10" style="font-size: 4rem; line-height: 1; font-weight: 900;">
      {(index + 1).toString().padStart(2, '0')}
    </div>
    
    <!-- Type Badge -->
    <div class="absolute top-4 left-4 z-10 pointer-events-none">
      <span class="bg-white border-2 border-black px-3 py-1 text-xs font-bold uppercase tracking-widest">
        {model.type}
      </span>
    </div>
    
    <!-- Hover Overlay -->
    <div class="download-overlay absolute inset-0 bg-black/80 opacity-0 group-hover:opacity-100 transition-all duration-300 flex z-20">
      {model.bundles?.images?.url && (
        <a 
          href={model.bundles.images.url}
          target="_blank"
          class="download-btn flex-1 flex flex-col items-center justify-center text-white transition-all duration-300"
          onclick="event.stopPropagation()"
          data-color="orange"
        >
          <svg class="w-10 h-10 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span class="text-sm font-bold uppercase tracking-wider">Images</span>
          {model.bundles.images.size && (
            <span class="text-xs mt-1 opacity-75">{model.bundles.images.size}</span>
          )}
        </a>
      )}
      
      {model.bundles?.models?.url && (
        <a 
          href={model.bundles.models.url}
          target="_blank"
          class="download-btn flex-1 flex flex-col items-center justify-center text-white transition-all duration-300 border-x border-white/20"
          onclick="event.stopPropagation()"
          data-color="pink"
        >
          <svg class="w-10 h-10 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          <span class="text-sm font-bold uppercase tracking-wider">Models</span>
          {model.bundles.models.size && (
            <span class="text-xs mt-1 opacity-75">{model.bundles.models.size}</span>
          )}
        </a>
      )}
      
      {model.bundles?.all?.url && (
        <a 
          href={model.bundles.all.url}
          target="_blank"
          class="download-btn flex-1 flex flex-col items-center justify-center text-white transition-all duration-300"
          onclick="event.stopPropagation()"
          data-color="teal"
        >
          <svg class="w-10 h-10 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <span class="text-sm font-bold uppercase tracking-wider">All Files</span>
          {model.bundles.all.size && (
            <span class="text-xs mt-1 opacity-75">{model.bundles.all.size}</span>
          )}
        </a>
      )}
    </div>
  </div>
  
  <!-- Title Bar - Outside the image container -->
  <div class="px-4 py-3 bg-white">
    <a href={`${import.meta.env.BASE_URL.replace(/\/$/, '')}/model/${model.slug}`} class="block hover:underline">
      <h3 class="text-lg font-bold truncate">
        {model.name}
      </h3>
    </a>
  </div>
</article>

<style>
  .refined-card {
    border: 2px solid black;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  
  .refined-card:hover {
    transform: translateY(-4px);
    box-shadow: 8px 8px 0px rgba(0, 0, 0, 0.1);
  }
  
  .download-overlay {
    transition: background-color 0.6s ease;
  }
  
  .download-btn {
    transition: background-color 0.6s ease, transform 0.2s ease;
  }
  
  .download-btn:hover {
    transform: scale(1.02);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const overlays = document.querySelectorAll('.download-overlay');
    
    overlays.forEach(overlay => {
      const buttons = overlay.querySelectorAll('.download-btn');
      
      buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
          const color = this.getAttribute('data-color');
          
          // Change background to lighter, more transparent version
          switch(color) {
            case 'orange':
              overlay.style.backgroundColor = 'rgba(254, 215, 170, 0.25)'; // very light peach background
              this.style.backgroundColor = 'rgba(254, 215, 170, 0.9)'; // soft peach button
              this.style.color = '#7c2d12'; // dark orange text
              break;
            case 'pink':
              overlay.style.backgroundColor = 'rgba(252, 231, 243, 0.25)'; // very light pink background
              this.style.backgroundColor = 'rgba(252, 231, 243, 0.9)'; // soft pink button
              this.style.color = '#831843'; // dark pink text
              break;
            case 'teal':
              overlay.style.backgroundColor = 'rgba(204, 251, 241, 0.25)'; // very light teal background
              this.style.backgroundColor = 'rgba(204, 251, 241, 0.9)'; // soft teal button
              this.style.color = '#134e4a'; // dark teal text
              break;
          }
        });
        
        button.addEventListener('mouseleave', function() {
          // Reset to default black background and clear button background
          overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
          this.style.backgroundColor = 'transparent';
          this.style.color = ''; // Reset to default gray text
        });
      });
    });
  });
</script>